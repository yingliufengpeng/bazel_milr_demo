load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")
load(":gentbl_cc_lib.bzl", "gentbl_cc_lib")

td_library(
    name = "td_files",
    srcs = glob(["include/*.td"]),
    deps = [
        "@llvm-project//mlir:BuiltinDialectTdFiles",
        "@llvm-project//mlir:InferIntRangeInterfaceTdFiles",
        "@llvm-project//mlir:InferTypeOpInterfaceTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

dialect_name = gentbl_cc_lib("gen", "dialect", "PengDialect", [":td_files"])
types_name = gentbl_cc_lib("gen", "typedef", "PengTypes", [":td_files", ":{}".format(dialect_name)])
enums_name = gentbl_cc_lib("gen", "enum", "PengEnums", [":td_files", ":{}".format(dialect_name)])
attrs_name = gentbl_cc_lib("gen", "attrdef", "PengAttrs", [
    ":td_files",
    ":{}".format(dialect_name),
#    ":{}".format(enums_name),
    ])
ops_name = gentbl_cc_lib("gen", "op", "PengOps", [":td_files", ":{}".format(dialect_name)])
interface_name = gentbl_cc_lib("gen", "op-interface", "DistributeParallelismOpInterfaces", [":td_files", ":{}".format(dialect_name)])
interface_attr_name = gentbl_cc_lib("gen", "attr-interface", "DistributeParallelismAttrInterfaces", [":td_files", ":{}".format(dialect_name)])


cc_library(
    name = "utils",
    srcs = glob(["src/Utils/*.cpp"]),
    hdrs = glob(["include/Utils/*.h"]),
    deps = [
       # LLVM Support 库（基础设施：StringRef、raw_ostream、ErrorHandling…）
       "@llvm-project//llvm:Support",

       # LLVM Core 库（IR 相关：Module, Function, Type …）
       "@llvm-project//llvm:Core",

       # LLVM Analysis 模块
       "@llvm-project//llvm:Analysis",

       # LLVM IRReader（解析 .ll 文件 -> LLVM IR Module）
       "@llvm-project//llvm:IRReader",

       # LLVM Pass framework
#       "@llvm-project//llvm:Passes",

        "@llvm-project//mlir:IR",          # 提供 IR/AsmState.h 及相关类
        "@llvm-project//mlir:Parser",    # 提供 Parser/Parser.h

   ]
)


cc_library(
    name = "lib",
    srcs = glob(["src/*.cpp"]),
    hdrs = glob(["include/*.h"]),
    deps = [
        ":{}".format(dialect_name),
        ":{}".format(types_name),
        ":{}".format(enums_name),
        ":{}".format(attrs_name),
        ":{}".format(ops_name),
        ":{}".format(interface_name),
        ":{}".format(interface_attr_name),
        "@llvm-project//mlir:ComplexDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:TensorDialect",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:InferIntRangeInterface",
        "@llvm-project//mlir:InferTypeOpInterface",
        "@llvm-project//mlir:Support",
        ":utils",
    ],
)


cc_binary(
    name = "main",
    srcs = ["main.cpp"],
    deps = [
        ":lib",
    ],
)