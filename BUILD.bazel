load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")
load(":gentbl_cc_lib.bzl", "gentbl_cc_lib", "gentbl_pass_cc_lib")

td_library(
    name = "td_files",
    srcs = glob(["include/*.td"]),
    deps = [
        "@llvm-project//mlir:BuiltinDialectTdFiles",
        "@llvm-project//mlir:ControlFlowInterfacesTdFiles",
        "@llvm-project//mlir:FunctionInterfacesTdFiles",
        "@llvm-project//mlir:InferIntRangeInterfaceTdFiles",
        "@llvm-project//mlir:InferTypeOpInterfaceTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

dialect_name = gentbl_cc_lib(
    "gen",
    "dialect",
    "PengDialect",
    [":td_files"],
)

types_name = gentbl_cc_lib(
    "gen",
    "typedef",
    "PengTypes",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

enums_name = gentbl_cc_lib(
    "gen",
    "enum",
    "PengEnums",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

attrs_name = gentbl_cc_lib(
    "gen",
    "attrdef",
    "PengAttrs",
    [
        ":td_files",
        ":{}".format(dialect_name),
        #    ":{}".format(enums_name),
    ],
)

ops_name = gentbl_cc_lib(
    "gen",
    "op",
    "PengOps",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

interface_name = gentbl_cc_lib(
    "gen",
    "op-interface",
    "DistributeParallelismOpInterfaces",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

interface_attr_name = gentbl_cc_lib(
    "gen",
    "attr-interface",
    "DistributeParallelismAttrInterfaces",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

transform_name = gentbl_pass_cc_lib(
    "gen",
    "Passes",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
    ["Transforms"],
)

fusion_interface_name = gentbl_cc_lib(
    "gen",
    "op-interface",
    "FusionRegionInterfaces",
    [
        ":td_files",
        ":{}".format(dialect_name),
    ],
)

cc_library(
    name = "utils",
    srcs = glob(["src/Utils/*.cpp"]),
    hdrs = glob(["include/Utils/*.h"]),
    deps = [
        # LLVM Support 库（基础设施：StringRef、raw_ostream、ErrorHandling…）
        "@llvm-project//llvm:Support",

        # LLVM Core 库（IR 相关：Module, Function, Type …）
        "@llvm-project//llvm:Core",

        # LLVM Analysis 模块
        "@llvm-project//llvm:Analysis",

        # LLVM IRReader（解析 .ll 文件 -> LLVM IR Module）
        "@llvm-project//llvm:IRReader",

        # LLVM Pass framework
        #       "@llvm-project//llvm:Passes",
        "@llvm-project//mlir:IR",  # 提供 IR/AsmState.h 及相关类
        "@llvm-project//mlir:Parser",  # 提供 Parser/Parser.h
    ],
)

cc_library(
    name = "lib",
    srcs = glob(["src/**/*.cpp"]),
    hdrs = glob(["include/**/*.h"]),
    copts = select({
        "@platforms//os:windows": ["/std:c++20"],
        "//conditions:default": ["-std=c++20"],
    }),
    deps = [
        ":{}".format(dialect_name),
        ":{}".format(types_name),
        ":{}".format(enums_name),
        ":{}".format(attrs_name),
        ":{}".format(ops_name),
        ":{}".format(interface_name),
        ":{}".format(interface_attr_name),
        ":{}".format(transform_name),
        ":{}".format(fusion_interface_name),
        ":utils",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:ComplexDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:FunctionInterfaces",
        "@llvm-project//mlir:ControlFlowInterfaces",
        "@llvm-project//mlir:InferIntRangeInterface",
        "@llvm-project//mlir:InferTypeOpInterface",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:BufferizationDialect",
        #        "@llvm-project//mlir:EmitCDialect",
        #        "@llvm-project//mlir:IndexDialect",
        #        "@llvm-project//mlir:IRDLDialect",
        #        "@llvm-project//mlir:MLProgramDialect",
        #        "@llvm-project//mlir:MPIDialect",
        #        "@llvm-project//mlir:NVGPUDialect",
        #        "@llvm-project//mlir:NVVMDialect",
        #        "@llvm-project//mlir:OpenMPDialect",
        #        "@llvm-project//mlir:PolynomialDialect",
        #        "@llvm-project//mlir:PtrDialect",
        #        "@llvm-project//mlir:ROCDLDialect",
        #        "@llvm-project//mlir:ShapeDialect",
        #        "@llvm-project//mlir:SPIRVDialect",
        #        "@llvm-project//mlir:TosaDialect",
        #        "@llvm-project//mlir:TransformDialect",
        #        "@llvm-project//mlir:X86VectorDialect",
        #        "@llvm-project//mlir:XeGPUDialect",
        #        "@llvm-project//mlir:ArmNeonDialect",
        #        "@llvm-project//mlir:ArmSMEDialect",
        #        "@llvm-project//mlir:ArmSVEDialect",
        #        "@llvm-project//mlir:AsyncDialect",
        #        "@llvm-project//mlir:GPUTransforms",
        "@llvm-project//mlir:AllPassesAndDialects",
        "@llvm-project//mlir:AllExtensions",
        "@llvm-project//mlir:MlirOptLib",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:OpenACCDialect",
        "@llvm-project//mlir:Support",
        "@llvm-project//mlir:TensorDialect",
        "@llvm-project//mlir:Transforms",
    ],

    #    defines = ["LLVM_ENABLE_PROJECTS=mlir"]
)

cc_binary(
    name = "main",
    srcs = ["main.cpp"],
    copts = select({
        "@platforms//os:windows": ["/std:c++20"],
        "//conditions:default": ["-std=c++20"],
    }),
    deps = [
        ":lib",
    ],
)

cc_binary(
    name = "main2",
    srcs = ["Tools/Peng-opt/Peng-opt.cpp"],
    copts = select({
        "@platforms//os:windows": ["/std:c++20"],
        "//conditions:default": ["-std=c++20"],
    }),
    data = ["test/softmax.mlir"],
    #    data = ["$(location 'test/softmax.mlir')"],
    deps = [
        ":lib",
        "@bazel_tools//tools/cpp/runfiles",
    ],
)
